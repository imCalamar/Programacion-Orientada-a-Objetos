Object subclass: #Agencia	instanceVariableNames: 'colVehiculos colAlqCamion colAlquileres colPreciosTipoCamion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO3-FAI1629- FAI2256'!!Agencia commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colAlqCamion:		<Object>	colAlquileres:		<Object>	colPreciosTipoCamion:		<Object>	colVehiculos:		<Object>    Implementation Points!!Agencia methodsFor: 'aplicacion' stamp: 'joaquin 6/6/2019 00:41'!buscarAlquiler:matricula|unAlquiler|colAlquileres do:[:alq | (alq obtenerAlquiler:matricula)ifTrue: [unAlquiler :=alq] ].^unAlquiler .! !!Agencia methodsFor: 'aplicacion' stamp: 'joaquin 6/5/2019 11:41'!obtenerPrecioCamion: capCarga|x|x:=nil.colPreciosTipoCamion do:[:aux | (aux at:0 = capCarga)ifTrue:[x:= aux at:1] ].^x.! !!Agencia methodsFor: 'aplicacion' stamp: 'joaquin 6/6/2019 01:02'!obtenerMatriculas:fecha|colMat|colMat :=OrderedCollection new.colAlquileres do:[:alq | (colMat := colMat + alq preguntarAlquiler:fecha) ].^colMat .! !!Agencia methodsFor: 'modificadores' stamp: 'joaquin 6/10/2019 22:54'!inicializarAgencia:unacolVehiculos colAlquileres:unaColAlquileres colPreciosTipoCamion:unaColPTCcolVehiculos := OrderedCollection new.colVehiculos add: unacolVehiculos .colAlquileres := OrderedCollection new.colAlquileres add: unaColAlquileres .colPreciosTipoCamion := OrderedCollection new.colPreciosTipoCamion add: unaColPTC .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Agencia class	instanceVariableNames: ''!!Agencia class methodsFor: 'Constructores' stamp: 'joaquin 6/7/2019 13:22'!crearAgencia:unacolVehiculos conColAlquileres:unaColAlquileres conColPreciosTipoCamion:unaColPTC|agencia|agencia := Agencia new.agencia inicializarAgencia:unacolVehiculos colAlquileres:unaColAlquileres colPreciosTipoCamion:unaColPTC.^agencia .! !Object subclass: #Alquiler	instanceVariableNames: 'cliente vehiculo fechaAlquiler fechaDevolucion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO3-FAI1629- FAI2256'!!Alquiler commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	fechaAlquiler:		<Object>	fechaDevolucion:		<Object>	unCliente:		<Object>	unvehiculo:		<Object>    Implementation Points!!Alquiler methodsFor: 'aplicacion' stamp: 'joaquin 6/6/2019 00:16'!devolverVehiculo:laAgencia y:km|precioAPagar|vehiculo actualizarVehiculo:km.fechaDevolucion := Date today .precioAPagar := Alquiler calcularPrecio:laAgencia  y:km.^precioAPagar .! !!Alquiler methodsFor: 'aplicacion' stamp: 'joaquin 6/5/2019 11:14'!calcularPrecio:laAgencia  y:kmAlquiler subclassResponsibility .! !!Alquiler methodsFor: 'aplicacion' stamp: 'joaquin 6/6/2019 00:35'!obtenerAlquiler:matricula|res|res:=false.(Vehiculo preguntarMatricula:matricula )ifTrue:[res:=true]. ^res.! !!Alquiler methodsFor: 'aplicacion' stamp: 'joaquin 6/6/2019 00:45'!preguntarAlquiler:fechaAlquiler subclassResponsibility .! !!Alquiler methodsFor: 'modificadores' stamp: 'joaquin 6/7/2019 13:29'!inicializarAlquiler:unCliente vehiculo:unvehiculo fechaAlq:unafechaAlquiler.cliente := unCliente .vehiculo := unvehiculo .fechaAlquiler := unafechaAlquiler .fechaDevolucion := nil.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Alquiler class	instanceVariableNames: ''!!Alquiler class methodsFor: 'Constructores' stamp: 'joaquin 6/5/2019 09:57'!creaAlquiler:unCliente conVehiculo:unvehiculo conFechaAlq:unafechaAlquiler|alq|alq := Alquiler new.alq inicializarAlquiler:unCliente vehiculo:unvehiculo fechaAlq:unafechaAlquiler.^alq .! !Alquiler subclass: #AlquilerCamion	instanceVariableNames: 'elemTtransportar'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO3-FAI1629- FAI2256'!!AlquilerCamion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	elemTtransportar:		<Object>    Implementation Points!!AlquilerCamion methodsFor: 'modificadores' stamp: 'joaquin 6/7/2019 13:30'!inicializar:unCliente vehiculo:unvehiculo fechaAlq:unafechaAlquiler elemTtransportar:unElemTransportar.self inicializarAlquiler:unCliente vehiculo:unvehiculo fechaAlq:unafechaAlquiler.elemTtransportar := unElemTransportar .! !!AlquilerCamion methodsFor: 'aplicacion' stamp: 'joaquin 6/5/2019 16:20'!calcularPrecio:laAgencia  y:km|dias capCarga p precioAPagar|dias := fechaDevolucion -fechaAlquiler .capCarga:= vehiculo obtenerCapCamion.p := laAgencia obtenerPrecioCamion: capCarga .precioAPagar :=dias*p.(capCarga ='semipesado')ifTrue: [ precioAPagar := precioAPagar * 0.25 ].^precioAPagar .! !!AlquilerCamion methodsFor: 'aplicacion' stamp: 'joaquin 6/6/2019 00:46'!preguntarAlquiler:fecha.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlquilerCamion class	instanceVariableNames: ''!!AlquilerCamion class methodsFor: 'Constructores' stamp: 'joaquin 6/7/2019 13:44'!crearAlqCamion:unCliente convehiculo:unvehiculo confechaAlq:unafechaAlquiler conElemTrasportar:unElemTransportar|alqC|alqC := self new.alqC inicializar:unCliente vehiculo:unvehiculo fechaAlq:unafechaAlquiler elemTtransportar:unElemTransportar.^alqC .! !Alquiler subclass: #AlquilerTurismo	instanceVariableNames: 'colAdicionales tieneGPS'	classVariableNames: 'costoExtra'	poolDictionaries: ''	category: 'TPO3-FAI1629- FAI2256'!!AlquilerTurismo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	cliente:		<Object>	fechaAlquiler:		<Object>	fechaDevolucion:		<Object>	vehiculo:		<Object>    Implementation Points!!AlquilerTurismo methodsFor: 'modificadores' stamp: 'joaquin 6/10/2019 22:54'!inicializar:unCliente vehiculo:unvehiculo fechaAlq:unafechaAlquiler colAdicionales:unaColAd.self inicializarAlquiler:unCliente vehiculo:unvehiculo fechaAlq:unafechaAlquiler.colAdicionales :=OrderedCollection new.colAdicionales add: unaColAd .costoExtra :=100.! !!AlquilerTurismo methodsFor: 'aplicacion' stamp: 'joaquin 6/6/2019 00:06'!calcularPrecio:laAgencia  y:km|preciokm precioAPagar|preciokm := self getPrecio.precioAPagar := km*preciokm.colAdicionales do:[:ad | precioAPagar := precioAPagar + costoExtra ].^precioAPagar .! !!AlquilerTurismo methodsFor: 'aplicacion' stamp: 'joaquin 6/6/2019 00:58'!preguntarAlquiler:fecha|unaMat|(fechaDevolucion isNil & fechaAlquiler=fecha & tieneGPS=true)ifTrue:[unaMat := self getMatricula.].^unaMat .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlquilerTurismo class	instanceVariableNames: ''!!AlquilerTurismo class methodsFor: 'Constructores' stamp: 'joaquin 6/7/2019 13:44'!crearAlqTurismo:unCliente convehiculo:unvehiculo confechaAlq:unafechaAlquiler conColAdicionales:unaColAd|alqT|alqT := self new.alqT inicializar:unCliente vehiculo:unvehiculo fechaAlq:unafechaAlquiler colAdicionales:unaColAd.^alqT .! !Object subclass: #ClienteTPO3	instanceVariableNames: 'dni nombre apellido tarjeta fechaVenc'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO3-FAI1629- FAI2256'!!ClienteTPO3 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	apellido:		<Object>	dni:		<Object>	fechaVenc:		<Object>	nombre:		<Object>	tarjeta:		<Object>    Implementation Points!!ClienteTPO3 methodsFor: 'modificadores' stamp: 'joaquin 6/7/2019 12:54'!inicializarCliente:unDni nombre:unNombre apellido:unApellido tarjeta:unaTarjeta fechaVenc:unaFVdni := unDni .nombre := unNombre .apellido := unApellido .tarjeta := unaTarjeta .fechaVenc := unaFV .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClienteTPO3 class	instanceVariableNames: ''!!ClienteTPO3 class methodsFor: 'Constructores' stamp: 'joaquin 6/7/2019 13:43'!crearCliente:unDni conNombre:unNombre conApellido:unApellido conTarjeta:unaTarjeta conFechaVenc:unaFV|cliente|cliente := self new.cliente inicializarCliente:unDni nombre:unNombre apellido:unApellido tarjeta:unaTarjeta fechaVenc:unaFV.^cliente .! !Object subclass: #Vehiculo	instanceVariableNames: 'patente marca modelo estaAlquilado kilometros'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO3-FAI1629- FAI2256'!!Vehiculo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	estaAlquilado:		<Object>	kilometros:		<Object>	marca:		<Object>	modelo:		<Object>	patente:		<Object>    Implementation Points!!Vehiculo methodsFor: 'modificadores' stamp: 'joaquin 6/5/2019 10:26'!inicializarVehiculo: unaPatente marca:unaMarca modelo:unModelo estaAlquilado:unEstaAlq kilometros:unKmpatente := unaPatente .marca:= unaMarca .modelo := unModelo .estaAlquilado := unEstaAlq .kilometros := unKm .! !!Vehiculo methodsFor: 'aplicacion' stamp: 'joaquin 6/5/2019 11:04'!actualizarVehiculo:kmkilometros := kilometros +km.estaAlquilado := false.! !!Vehiculo methodsFor: 'aplicacion' stamp: 'joaquin 6/5/2019 11:20'!obtenerCapCamion.Vehiculo subclassResponsibility .! !!Vehiculo methodsFor: 'aplicacion' stamp: 'joaquin 6/6/2019 00:35'!preguntarMatricula:matricula|res|res:=false.(patente = matricula )ifTrue:[res:=true].^res. ! !!Vehiculo methodsFor: 'observadores' stamp: 'joaquin 6/5/2019 23:44'!getPrecio.Vehiculo subclassResponsibility .! !!Vehiculo methodsFor: 'observadores' stamp: 'joaquin 6/6/2019 00:52'!getMatricula^patente.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Vehiculo class	instanceVariableNames: ''!!Vehiculo class methodsFor: 'Constructores' stamp: 'joaquin 6/5/2019 10:34'!crearVehiculo:unaPatente conMarca:unaMarca conModelo:unModelo conEstaAlquilado:unEstaAlq conKilometros:unKm|vehiculo|vehiculo := self new.vehiculo inicializarVehiculo: unaPatente marca:unaMarca modelo:unModelo estaAlquilado:unEstaAlq kilometros:unKm.^vehiculo .! !Vehiculo subclass: #Camion	instanceVariableNames: 'tipo capacidadCarga kmService'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO3-FAI1629- FAI2256'!!Camion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	capacidadCarga:		<Object>	kmService:		<Object>	tipo:		<Object>    Implementation Points!!Camion methodsFor: 'observadores' stamp: 'joaquin 6/6/2019 00:53'!getMatriculasuper getMatricula .! !!Camion methodsFor: 'modificadores' stamp: 'joaquin 6/5/2019 10:38'!inicializarVehiculo: unaPatente marca:unaMarca modelo:unModelo estaAlquilado:unEstaAlq kilometros:unKm tipo:unTipo capacidadCarga:unaCapCarga kmService:unKmServiceself inicializarVehiculo: unaPatente marca:unaMarca modelo:unModelo estaAlquilado:unEstaAlq kilometros:unKm.tipo := unTipo .capacidadCarga := unaCapCarga .kmService := unKmService .! !!Camion methodsFor: 'aplicacion' stamp: 'joaquin 6/5/2019 11:05'!actualizarVehiculo:km super actualizarVehiculo: km.! !!Camion methodsFor: 'aplicacion' stamp: 'joaquin 6/5/2019 11:22'!obtenerCapCamion|capCarga|capCarga :=capacidadCarga .! !!Camion methodsFor: 'aplicacion' stamp: 'joaquin 6/6/2019 00:38'!preguntarMatricula:matriculasuper preguntarMatricula: matricula .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Camion class	instanceVariableNames: ''!!Camion class methodsFor: 'constructores' stamp: 'joaquin 6/5/2019 10:46'!crearCamion: unaPatente conmarca:unaMarca conmodelo:unModelo conestaAlquilado:unEstaAlq conkilometros:unKm contipo:unTipo concapacidadCarga:unaCapCarga conkmService:unKmService|camion|camion := self new.camion inicializarVehiculo: unaPatente marca:unaMarca modelo:unModelo estaAlquilado:unEstaAlq kilometros:unKm tipo:unTipo capacidadCarga:unaCapCarga kmService:unKmService.^camion . ! !Vehiculo subclass: #Turismo	instanceVariableNames: 'precioPorKm tieneGPS'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO3-FAI1629- FAI2256'!!Turismo commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	precioPorKm:		<Object>	tieneGPS:		<Object>    Implementation Points!!Turismo methodsFor: 'aplicacion' stamp: 'joaquin 6/5/2019 11:06'!actualizarVehiculo:km super actualizarVehiculo: km.! !!Turismo methodsFor: 'aplicacion' stamp: 'joaquin 6/6/2019 00:38'!preguntarMatricula:matriculasuper preguntarMatricula: matricula .! !!Turismo methodsFor: 'observadores' stamp: 'joaquin 6/5/2019 23:45'!getPrecio.^precioPorKm .! !!Turismo methodsFor: 'observadores' stamp: 'joaquin 6/6/2019 00:54'!getMatriculasuper getMatricula .! !!Turismo methodsFor: 'modificadores' stamp: 'joaquin 6/5/2019 10:49'!inicializarVehiculo: unaPatente marca:unaMarca modelo:unModelo estaAlquilado:unEstaAlq kilometros:unKm precioPorKm:unPrecio tieneGPS:unGPSself inicializarVehiculo: unaPatente marca:unaMarca modelo:unModelo estaAlquilado:unEstaAlq kilometros:unKm.precioPorKm := unPrecio .tieneGPS := unGPS .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Turismo class	instanceVariableNames: ''!!Turismo class methodsFor: 'Constructores' stamp: 'joaquin 6/5/2019 10:51'!crearTurismo: unaPatente marca:unaMarca modelo:unModelo estaAlquilado:unEstaAlq kilometros:unKm precioPorKm:unPrecio tieneGPS:unGPS|turismo|turismo := self new.turismo inicializarVehiculo: unaPatente marca:unaMarca modelo:unModelo estaAlquilado:unEstaAlq kilometros:unKm precioPorKm:unPrecio tieneGPS:unGPS.^turismo .! !