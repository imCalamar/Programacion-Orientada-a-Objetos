Object subclass: #Vehiculotp5	instanceVariableNames: 'patente kmRecorridos'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp5ejer5(no polimorfismo)'!!Vehiculotp5 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	kmRecorridos:		<Object>	patente:		<Object>    Implementation Points!!Vehiculotp5 methodsFor: 'modificadores' stamp: 'joaquin 5/21/2019 13:53'!inicializar: unaPatente kmRecorridos: unosKmRecorridospatente := unaPatente .kmRecorridos := unosKmRecorridos .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Vehiculotp5 class	instanceVariableNames: ''!!Vehiculotp5 class methodsFor: 'constructores' stamp: 'joaquin 5/20/2019 18:34'!crearVehiculo: unaPatente con:unosKmRecorridos |vehiculo|vehiculo :=Vehiculotp5 new .vehiculo inicializarVehiculo: unaPatente kmRecorridos: unosKmRecorridos. ^vehiculo .! !Vehiculotp5 subclass: #AutoTp5	instanceVariableNames: 'marca km color'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp5ejer5(no polimorfismo)'!!AutoTp5 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	color:		<Object>	km:		<Object>	marca:		<Object>    Implementation Points!!AutoTp5 methodsFor: 'visualizadores' stamp: 'joaquin 5/20/2019 17:28'!getCantKmRecorridos^cantKmRecorridos .! !!AutoTp5 methodsFor: 'visualizadores' stamp: 'joaquin 5/20/2019 17:28'!getMarca ^marca .! !!AutoTp5 methodsFor: 'visualizadores' stamp: 'joaquin 5/20/2019 17:28'!getPatente^patente .! !!AutoTp5 methodsFor: 'visualizadores' stamp: 'joaquin 5/20/2019 17:28'!getColor^color.! !!AutoTp5 methodsFor: 'aplicacion' stamp: 'joaquin 5/20/2019 17:28'!andarKm: ncantKmRecorridos := cantKmRecorridos +n.! !!AutoTp5 methodsFor: 'modificadores' stamp: 'joaquin 5/21/2019 15:47'!inicializar: unaPatente kmRecorridos: unosKmRcorridos color:unColor marca:unaMarca km: unKm.self inicializar: unaPatente  kmRecorridos: unosKmRcorridos . color := unColor .marca := unaMarca .km:= unKm .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AutoTp5 class	instanceVariableNames: ''!!AutoTp5 class methodsFor: 'Constructores' stamp: 'joaquin 5/21/2019 13:58'!crearAuto:unaPatente conKmRecorridos: unosKmRcorridos kmcolor:unColor marca:unaMarca km:unKm|auto|auto := AutoTp5 new.auto inicializar: unaPatente kmRecorridos: unosKmRcorridos color:unColor marca:unaMarca km: unKm.^auto.! !!AutoTp5 class methodsFor: 'Constructores' stamp: 'joaquin 5/20/2019 18:19'!crearConCanKmRecorridos:unaKmRecorridos ConPatente:unaPatente color:unColor marca:unaMarca km:unKm|auto|auto := AutoTp5 new.auto inicializarCanKmRecorridos:unaKmRecorridos color:unColor  marca:unaMarca   patente:unaPatente  km:unKm .^auto.! !Vehiculotp5 subclass: #CamionTp5	instanceVariableNames: 'tipo kmservice tara'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp5ejer5(no polimorfismo)'!!CamionTp5 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	kmservice:		<Object>	tara:		<Object>	tipo:		<Object>    Implementation Points!!CamionTp5 methodsFor: 'modificadores' stamp: 'joaquin 5/24/2019 19:06'!inicilizarCamion:unaPatente kmRecorridos:unosKmRecorridos tipo:unTipo kmservice: unKmService tara: unaTara. "herencia no polimorfica"super inicializar: unaPatente kmRecorridos: unosKmRecorridos . "refinado"tipo := unTipo .kmservice := unKmService .tara := unaTara ."no es poliformico con refinamiento"! !!CamionTp5 methodsFor: 'aplicacion' stamp: 'joaquin 5/20/2019 17:25'!verificarService: n                "recive un valor"|r|                               "se crea nueva variable temporal"(n > kmservice) ifTrue: [r:=true]                        ifFalse:[r:=false ]. "pregunta si n>km si es verdad r=true sino false" ^r.! !!CamionTp5 methodsFor: 'aplicacion' stamp: 'joaquin 5/20/2019 17:25'!verificarTara: n                "recive un valor"|res|                                "se crea nueva variable temporal"(n > kmservice)ifTrue: [res:='supero tara']ifFalse:[res:='no supero' ]. "pregunta si n>km si es verdad r=true sino false" ^res.! !!CamionTp5 methodsFor: 'visualizadores' stamp: 'joaquin 5/20/2019 17:25'!getKmsrevice^kmservice ! !!CamionTp5 methodsFor: 'visualizadores' stamp: 'joaquin 5/20/2019 17:25'!getMatricula^matricula .! !!CamionTp5 methodsFor: 'visualizadores' stamp: 'joaquin 5/20/2019 17:25'!getTara^tara .! !!CamionTp5 methodsFor: 'visualizadores' stamp: 'joaquin 5/20/2019 17:25'!getKmactual^kmactual .! !!CamionTp5 methodsFor: 'visualizadores' stamp: 'joaquin 5/20/2019 17:25'!getTipo^tipo .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CamionTp5 class	instanceVariableNames: ''!!CamionTp5 class methodsFor: 'constructores' stamp: 'joaquin 5/20/2019 18:14'!crearCamion:unaPatente conkmRecorridos:unosKmRecorridos contipo:unTipo conkmservice: unKmService contara: unaTara|camion|camion :=CamionTp5 new.camion inicilizarCamion:unaPatente kmRecorridos:unosKmRecorridos tipo:unTipo kmservice: unKmService tara: unaTara.^camion .! !!CamionTp5 class methodsFor: 'constructores' stamp: 'joaquin 5/20/2019 18:06'!crearCamion.! !Vehiculotp5 subclass: #MotoTp5	instanceVariableNames: 'colEnvios'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp5ejer5(no polimorfismo)'!!MotoTp5 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colEnvios:		<Object>    Implementation Points!!MotoTp5 methodsFor: 'modificadores' stamp: 'joaquin 5/24/2019 19:08'!inicializar: unapatente kmRecorridos: unosKmRecorridos  "herencia polimorfica"super inicializar: unapatente  kmRecorridos: unosKmRecorridos . "refinado"colEnvios := OrderedCollection new."polimorfico con refinamiento"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MotoTp5 class	instanceVariableNames: ''!!MotoTp5 class methodsFor: 'constructores' stamp: 'joaquin 5/24/2019 19:04'!crear:unapatente kmRecorridos: unosKmRecorridos|moto|moto:= MotoTp5 new.moto inicializar: unapatente kmRecorridos: unosKmRecorridos.^moto.! !